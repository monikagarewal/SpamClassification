#Training SVM model for spam classification
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn import svm
import pickle

#Step-1: Loading csv file in which emails and their corresponding label are stored

data = pd.read_csv('/content/gdrive/MyDrive/spam2.csv')

train_e = data["EmailText"]
train_l = data["Label"]


train_x= filter_it(train_e)

#Step-3: Extracting features
countv = CountVectorizer()  
features = countv.fit_transform(train_x)

#Step-4: Building model
model1 = svm.SVC(kernel = 'linear', C=1)
model1.fit(features,train_l)

#Step-5: Save the model
filename = "my_model"
pickle.dump(model1, open(filename, 'wb'))
loaded_model1 = pickle.load(open(filename, 'rb'))

filename1 = "my_cv"
pickle.dump(countv, open(filename1, 'wb'))
loaded_cv1 = pickle.load(open(filename1, 'rb'))
----------------------------------------------------------------------------------------

# Reading set of emails stored in folder named test which is stored in current directory

import glob
import os

os.chdir(r'./test')
myFiles = glob.glob('*.txt')
output_list= []
for files in myFiles:
  content1=""
  with open(files,'r') as file1:
    countriesStr = file1.read()
  output_list.append(countriesStr)
  output_list1=filter_it(output_list)
output=loaded_model1.predict(loaded_cv1.transform(output_list1))
print(output)
with open("./output.txt", "w") as txt_file:
        txt_file.write(str(output))
import glob
import os

# Reading set of emails stored in folder named test which is stored in current directory
import glob
import os

os.chdir(r'./test')
myFiles = glob.glob('*.txt')
output_list= []
for files in myFiles:
  content1=""
  with open(files,'r') as file1:
    countriesStr = file1.read()
  output_list.append(countriesStr)
  output_list1=filter_it(output_list)
output=loaded_model1.predict(loaded_cv1.transform(output_list1))
print("predicted values are: "output)

# Storing predicted values in output.txt
with open("./output.txt", "w") as txt_file:
        txt_file.write(str(output))